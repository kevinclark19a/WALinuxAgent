trigger:
  - develop
  - dcr_azure-pipelines_prototype
  - releases/*

pr:
  - develop

parameters:
  - name: agentVersion
    displayName: Guest Agent Version
    type: string
    default: "9.9.9.9"

variables:
  ${{ if contains( variables['Build.SourceBranchName'], 'release-' ) }}:
    agentVersion: ${{ replace(variables['Build.SourceBranchName'], 'release-', '') }}
  ${{ if eq( variables['Build.SourceBranchName'], 'develop') }}:
    agentVersion: "9.9.9.9"
  agentVersion: ${{ coalesce(variables['agentVersion'], parameters['agentVersion']) }}
  prototypeDirectory: "$(Build.Repository.LocalPath)/.azure-pipelines/dungeon_crawler_prototype"

jobs:

- job: DCR
  strategy:
    matrix:
      'PyTest Prototype v3.6':
        scenarioDirectory: "pytests-prototype"
        pythonVersion: '3.6'
      'PyTest Prototype v2.6':
        scenarioDirectory: "pytests-prototype"
        pythonVersion: '2.6'
      'PyTest Prototype v2.7':
        scenarioDirectory: "pytests-prototype"
        pythonVersion: '2.7'
      'PyTest Prototype v3.9':
        scenarioDirectory: "pytests-prototype"
        pythonVersion: '3.9'

  pool:
    vmImage: "ubuntu-16.04"

  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(pythonVersion)

  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install Pip Tools'
  
  - script: |
      python -m pip install -r requirements.txt
      python -m pip install -r dcr-requirements.txt
    displayName: 'Install WALinuxAgent dependencies'

  - script: |
      sudo ./makepkg.py
      sudo cp ./eggs/WALinuxAgent-${{variables['agentVersion']}}.zip /var/lib/waagent/
      sudo systemctl stop walinuxagent
      sudo unzip /var/lib/waagent/WALinuxAgent-${{variables['agentVersion']}}.zip \
        -d /var/lib/waagent/WALinuxAgent-${{variables['agentVersion']}}
      sudo systemctl daemon-reload && sudo systemctl start walinuxagent
    displayName: "Install latest WALinuxAgent from source"
  
  - script: |
      sys_python_package_dir=$(./${{variables.prototypeDirectory}}/workflows/python_package_dir.sh $(pythonVersion))
      echo "##vso[task.setvariable variable=PYTHONPATH]$PYTHONPATH:$sys_python_package_dir:${{ variables.prototypeDirectory }}/"
    displayName: "Update PYTHONPATH"

  - bash: |
      scenario_dir="dungeon_crawler/scenarios/$(scenarioDirectory)"

      pytest --junitxml=TEST-PROTOTYPE.xml "${{ variables.prototypeDirectory }}/$scenario_dir"
    displayName: "Run pytest"

  - task: PublishTestResults@2
    condition: succeededOrFailed()

